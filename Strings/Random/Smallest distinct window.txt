class Solution{
    public:
    int findSubString(string str)
    {
        
        unordered_set<char> s;
        // Get the unique characters from string
        for(int i=0;i<str.length();i++) {
            s.insert(str[i]);
        }
        int setSize = s.size();
        unordered_map<char,int> m;// character,count
        int ans = INT_MAX;
        // Maintain the start index
        int start = 0;
        // Moving index
        int i = 0;
        int n = str.length();
        while(i < n) {
            
            m[str[i]]++;
            // if the size of map is equal to size of set then remove elemnts from start of map to get minimum window
            if(m.size() == setSize) {
                
                // Remove until the count is 1
                while(m[str[start]] > 1) {
                    
                    m[str[start]]--;
                    start++;
                }
                // find the min length
                ans = min(ans,i-start+1);
            }
            i++;
        }
        return ans;
        
    }
};