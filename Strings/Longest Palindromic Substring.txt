class Solution {
public:
    string longestPalindrome(string s) {
        
        
        int n = s.length();
        int start = 0;
        int end = 0;
        int maxLen = 1;
        // Odd Length Palindromic Substring
        for(int i=0;i<n-1;i++) {
            
            int l = i;
            int r = i;
            // Pick ith element and check the character before it and after it 
            while(l >= 0 && r < n) {
                if(s[l] == s[r]) {
                    l--;
                    r++;
                }
                else {
                    break;
                }
            }
            // Compute the Length check for maxLen
            int len = r-l-1;
            if(len > maxLen) {
                maxLen = len;
                start = l+1;
                end = r-1;
            }
        }
        // Even Length Palindromic Substring
        for(int i=0;i<n-1;i++) {
            
            int l = i;
            int r = i+1;
            // Pick ith element and check the character before it and after it 
            while(l >= 0 && r < n) {
                if(s[l] == s[r]) {
                    l--;
                    r++;
                }
                else {
                    break;
                }
            }
            // Compute the Length check for maxLen
            int len = r-l-1;
            if(len > maxLen) {
                maxLen = len;
                start = l+1;
                end = r-1;
            }
        }
        
        return s.substr(start,maxLen);
    }
};