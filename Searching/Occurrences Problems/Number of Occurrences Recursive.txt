class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
    int firstIndexRecursive(int nums[],int start,int end,int target,int n) {
        
        if(start > end) {
            return -1;
        }
        
        int mid = start + (end-start)/2;
        
        if(target > nums[mid]) {
            return firstIndexRecursive(nums,mid+1,end,target,n);
        }
        else if(target < nums[mid]) {
            return firstIndexRecursive(nums,start,mid-1,target,n);
        }
        else {
            // Check the edge cases
            if(mid == 0 || nums[mid-1] != nums[mid]) {
                return mid;
            }
            else {
                return firstIndexRecursive(nums,start,mid-1,target,n);
            }
        }
        
        
    }
    int lastIndexRecursive(int nums[],int start,int end,int target,int n) {
        
        if(start > end) {
            return -1;
        }
        
        int mid = start + (end-start)/2;
        
        if(target > nums[mid]) {
            return lastIndexRecursive(nums,mid+1,end,target,n);
        }
        else if(target < nums[mid]) {
            return lastIndexRecursive(nums,start,mid-1,target,n);
        }
        else {
            // Check the edge cases
            if(mid == n-1 || nums[mid] != nums[mid+1]) {
                return mid;
            }
            else {
                return lastIndexRecursive(nums,mid+1,end,target,n);
            }
        }
        
        
    }
	int count(int arr[], int n, int target) {
	    
	    int indexFirst = firstIndexRecursive(arr,0,n-1,target,n);
        int indexLast = lastIndexRecursive(arr,0,n-1,target,n);
        
        if(indexFirst == -1 || indexLast == -1) {
            return 0;
        }
        
        return indexLast-indexFirst+1;
	    
	}
};