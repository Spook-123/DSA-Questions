class Solution {
public:
    int firstIndex(vector<int>& nums,int target) {
        int low = 0;
        int high = nums.size()-1;
        
        while(low <= high) {
            
            int mid = low + (high-low)/2;
            if(target > nums[mid] ) {
                low = mid+1;
            } 
            else if(target < nums[mid]) {
                high = mid-1;
            }
            else {
                if(mid == 0 || nums[mid-1] != nums[mid]) {
                    return mid;
                }
                else {
                    high = mid-1;
                }
            }
        }
        return -1;
        
    }
    int lastIndex(vector<int>& nums,int target) {
        int low = 0;
        int high = nums.size()-1;
        
        while(low <= high ) {
            
            int mid = low + (high-low)/2;
            if(target > nums[mid]) {
                low = mid+1;
            }
            else if(target < nums[mid]) {
                high = mid-1;
            }
            else {
                if(mid == nums.size()-1 || nums[mid+1] != nums[mid]) {
                    return mid;
                }
                else {
                    low = mid+1;
                }
            }
        }
        return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        int e1 = firstIndex(nums,target);
        int e2 = lastIndex(nums,target);
        ans.push_back(e1);
        ans.push_back(e2);
        return ans;
    }
};