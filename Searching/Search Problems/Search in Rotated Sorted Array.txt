class Solution {
public:
    
    int solve(vector<int>& nums,int target,int start,int end) {
        
        while(start <= end) {
            // Compute the middle element
            int mid = start + (end-start)/2;
            
            // check the matching condition
            if(nums[mid] == target) {
                return mid;
            }
            // check if the left half is sorted 
            else if(nums[mid] >= nums[start]) {
                // check if target lies in left sorted half
                if(target >= nums[start] && target < nums[mid]) {
                    end = mid-1;
                }
                // if target is not present then go to right half  
                else {
                    start = mid+1;
                }
            }
            // check if the right half is sorted
            else {
                
                // check if target lies in right sorted half
                if(target > nums[mid] && target <= nums[end]) {
                    start = mid+1;
                }
                // if target is not present then go to left half 
                else {
                    end = mid-1;
                }
            }
        }
        
        return -1;
        
        
    }
    
    int search(vector<int>& nums, int target) {
        
        
        int ansIndex = solve(nums,target,0,nums.size()-1);
        
        
        return ansIndex;
        
    }
};